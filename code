#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <windows.h>
#include <iostream>
#include <cstdlib>
#include <vector>
#include <ctime>

using namespace std;

//––––––––––––––––––––ГЛОБАЛЬНЫЕ КОНСТАНТЫ–––––––––––––––––––
const int CELL_SIZE = 1; //РАЗМЕР КЛЕТКИ
const int GRID_WIDTH = 60; //ШИРИНА РЕШЕТКИ (В КЛЕТКАХ)
const int GRID_HEIGHT = 120; //ВЫСОТА РЕШЕТКИ (В КЛЕТКАХ)
const int GRID_DEPTH = 80; //ГЛУБИНА РЕШЕТКИ (В КЛЕТКАХ)
const int WINDOW_WIDTH = 1600; //ШИРИНА ОКНА ВЫВОДА
const int WINDOW_HEIGHT = 900; //ВЫСОТА ОКНА ВЫВОДА

// СОСТОЯНИЯ КЛЕТОЧНОГО АВТОМАТА
enum CellType {
    EMPTY,
    OBSTACLE,
    LIQUID
};

struct Cell {
    CellType type;
    float r, g, b, a;
};

vector<vector<vector<Cell>>> grid(GRID_HEIGHT, vector<vector<Cell>>(GRID_DEPTH, vector<Cell>(GRID_WIDTH)));

// ПОЛОЖЕНИЕ КАМЕРЫ
float cameraX = GRID_WIDTH;
float cameraY = -GRID_HEIGHT + 40.0f;
float cameraZ = -GRID_DEPTH;
float angleX = 200.0f;
float angleY = 30.0f;

//–––––––––––––––––––ПРОЦЕДУРЫ––––––––––––––––––––––
// СОЗДАНИЕ ПУСТОЙ РЕШЁТКИ
void initializeGrid() {
    for (int i = 0; i < GRID_HEIGHT; ++i) {
        for (int j = 0; j < GRID_DEPTH; ++j) {
            for (int k = 0; k < GRID_WIDTH; ++k) {
                grid[i][j][k].type = EMPTY;
                grid[i][j][k].r = 1.0f;
                grid[i][j][k].g = 1.0f;
                grid[i][j][k].b = 1.0f;
                grid[i][j][k].a = 0.0f;
            }
        }
    }
}

// СОЗДАНИЕ ПОРИСТОЙ СРЕДЫ
void placeObstacles() {
    srand(time(NULL));
    for (int i = GRID_HEIGHT / 2; i < GRID_HEIGHT; ++i) {
        for (int j = 0; j < GRID_DEPTH; ++j) {
            for (int k = 0; k < GRID_WIDTH; ++k) {
                if (rand() % 3 == 1) {
                    grid[i][j][k].type = OBSTACLE;
                    grid[i][j][k].r = 0.2f;
                    grid[i][j][k].g = 0.2f;
                    grid[i][j][k].b = 0.2f;
                    grid[i][j][k].a = 0.3f;
                }
            }
        }
    }
}

//ОБНОВЛЕНИЕ СОСТОЯНИЙ КЛЕТОК
void updateLiquid(int kol) {
    srand(time(NULL));
    int rnd;
    int kol1 = kol * kol;
    for (int i = GRID_HEIGHT - 1; i >= 0; --i) {
        for (int j = 0; j < GRID_DEPTH; ++j) {
            for (int m = 0; m < GRID_WIDTH; ++m) {
                if (grid[i][j][m].type == LIQUID) {
                    if (i + 1 < GRID_HEIGHT && grid[i + 1][j][m].type == EMPTY) {
                        grid[i][j][m].type = EMPTY;
                        grid[i][j][m].r = 1.0f;
                        grid[i][j][m].g = 1.0f;
                        grid[i][j][m].b = 1.0f;
                        grid[i][j][m].a = 0.0f;
                        grid[i + 1][j][m].type = LIQUID;
                        grid[i + 1][j][m].r = 0.0f;
                        grid[i + 1][j][m].g = 0.7f;
                        grid[i + 1][j][m].b = 1.0f;
                        grid[i + 1][j][m].a = 1.0f;
                        continue;
                    }
                    else if (i + 1 < GRID_HEIGHT && (grid[i + 1][j][m].type == OBSTACLE || grid[i + 1][j][m].type == LIQUID)) {
                        rnd = rand() % 4 + 1;

                        if (rnd == 1 && j > 0 && grid[i][j - 1][m].type == EMPTY) {
                            grid[i][j][m].type = EMPTY;
                            grid[i][j][m].r = 1.0f;
                            grid[i][j][m].g = 1.0f;
                            grid[i][j][m].b = 1.0f;
                            grid[i][j][m].a = 0.0f;
                            grid[i][j - 1][m].type = LIQUID;
                            grid[i][j - 1][m].r = 0.0f;
                            grid[i][j - 1][m].g = 0.7f;
                            grid[i][j - 1][m].b = 1.0f;
                            grid[i][j - 1][m].a = 1.0f;
                            continue;
                        }
                        else if (rnd == 2 && j < GRID_DEPTH - 1 && grid[i][j + 1][m].type == EMPTY) {
                            grid[i][j][m].type = EMPTY;
                            grid[i][j][m].r = 1.0f;
                            grid[i][j][m].g = 1.0f;
                            grid[i][j][m].b = 1.0f;
                            grid[i][j][m].a = 0.0f;
                            grid[i][j + 1][m].type = LIQUID;
                            grid[i][j + 1][m].r = 0.0f;
                            grid[i][j + 1][m].g = 0.7f;
                            grid[i][j + 1][m].b = 1.0f;
                            grid[i][j + 1][m].a = 1.0f;
                            continue;
                        }
                        else if (rnd == 3 && m > 0 && grid[i][j][m - 1].type == EMPTY) {
                            grid[i][j][m].type = EMPTY;
                            grid[i][j][m].r = 1.0f;
                            grid[i][j][m].g = 1.0f;
                            grid[i][j][m].b = 1.0f;
                            grid[i][j][m].a = 0.0f;
                            grid[i][j][m - 1].type = LIQUID;
                            grid[i][j][m - 1].r = 0.0f;
                            grid[i][j][m - 1].g = 0.7f;
                            grid[i][j][m - 1].b = 1.0f;
                            grid[i][j][m - 1].a = 1.0f;
                            continue;
                        }
                        else if (rnd == 4 && m < GRID_WIDTH - 1 && grid[i][j][m + 1].type == EMPTY) {
                            grid[i][j][m].type = EMPTY;
                            grid[i][j][m].r = 1.0f;
                            grid[i][j][m].g = 1.0f;
                            grid[i][j][m].b = 1.0f;
                            grid[i][j][m].a = 0.0f;
                            grid[i][j][m + 1].type = LIQUID;
                            grid[i][j][m + 1].r = 0.0f;
                            grid[i][j][m + 1].g = 0.7f;
                            grid[i][j][m + 1].b = 1.0f;
                            grid[i][j][m + 1].a = 1.0f;
                            continue;
                        }
                    }
                    for (int t = 1; t <= kol1; t++) {
                        if (i - t >= 0 && grid[i - t][j][m].type == LIQUID) {
                            rnd = rand() % 4 + 1;

                            if (rnd == 1 && j > 0 && grid[i - t][j - 1][m].type == EMPTY) {
                                grid[i - t][j][m].type = EMPTY;
                                grid[i - t][j][m].r = 1.0f;
                                grid[i - t][j][m].g = 1.0f;
                                grid[i - t][j][m].b = 1.0f;
                                grid[i - t][j][m].a = 0.0f;
                                grid[i - t][j - 1][m].type = LIQUID;
                                grid[i - t][j - 1][m].r = 0.0f;
                                grid[i - t][j - 1][m].g = 0.7f;
                                grid[i - t][j - 1][m].b = 1.0f;
                                grid[i - t][j - 1][m].a = 1.0f;
                                continue;
                            }
                            else if (rnd == 2 && j < GRID_DEPTH - 1 && grid[i - t][j + 1][m].type == EMPTY) {
                                grid[i - t][j][m].type = EMPTY;
                                grid[i - t][j][m].r = 1.0f;
                                grid[i - t][j][m].g = 1.0f;
                                grid[i - t][j][m].b = 1.0f;
                                grid[i - t][j][m].a = 0.0f;
                                grid[i - t][j + 1][m].type = LIQUID;
                                grid[i - t][j + 1][m].r = 0.0f;
                                grid[i - t][j + 1][m].g = 0.7f;
                                grid[i - t][j + 1][m].b = 1.0f;
                                grid[i - t][j + 1][m].a = 1.0f;
                                continue;
                            }
                            else if (rnd == 3 && m > 0 && grid[i - t][j][m - 1].type == EMPTY) {
                                grid[i - t][j][m].type = EMPTY;
                                grid[i - t][j][m].r = 1.0f;
                                grid[i - t][j][m].g = 1.0f;
                                grid[i - t][j][m].b = 1.0f;
                                grid[i - t][j][m].a = 0.0f;
                                grid[i - t][j][m - 1].type = LIQUID;
                                grid[i - t][j][m - 1].r = 0.0f;
                                grid[i - t][j][m - 1].g = 0.7f;
                                grid[i - t][j][m - 1].b = 1.0f;
                                grid[i - t][j][m - 1].a = 1.0f;
                                continue;
                            }
                            else if (rnd == 4 && m < GRID_WIDTH - 1 && grid[i - t][j][m + 1].type == EMPTY) {
                                grid[i - t][j][m].type = EMPTY;
                                grid[i - t][j][m].r = 1.0f;
                                grid[i - t][j][m].g = 1.0f;
                                grid[i - t][j][m].b = 1.0f;
                                grid[i - t][j][m].a = 0.0f;
                                grid[i - t][j][m + 1].type = LIQUID;
                                grid[i - t][j][m + 1].r = 0.0f;
                                grid[i - t][j][m + 1].g = 0.7f;
                                grid[i - t][j][m + 1].b = 1.0f;
                                grid[i - t][j][m + 1].a = 1.0f;
                                continue;
                            }
                        }
                    }
                }
            }
        }
    }
}

// ЗАПОЛНЕНИЕ ОКНА
void drawGrid() {
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glBegin(GL_QUADS);
    for (int i = 0; i < GRID_HEIGHT; ++i) {
        for (int j = 0; j < GRID_DEPTH; ++j) {
            for (int k = 0; k < GRID_WIDTH; ++k) {
                if (grid[i][j][k].type == EMPTY) continue;

                // Пропускаем отрисовку граничных стенок
                if ((k == 0 || k == GRID_WIDTH - 1 || j == 0 || j == GRID_DEPTH - 1 || i == GRID_HEIGHT - 1) &&
                    grid[i][j][k].type == OBSTACLE) {
                    continue;
                }

                glColor4f(grid[i][j][k].r, grid[i][j][k].g, grid[i][j][k].b, grid[i][j][k].a);

                //ГРАНИ КУБА
                glVertex3f(k, i, j);
                glVertex3f(k + 1, i, j);
                glVertex3f(k + 1, i + 1, j);
                glVertex3f(k, i + 1, j);

                glVertex3f(k, i, j + 1);
                glVertex3f(k + 1, i, j + 1);
                glVertex3f(k + 1, i + 1, j + 1);
                glVertex3f(k, i + 1, j + 1);

                glVertex3f(k, i, j);
                glVertex3f(k, i, j + 1);
                glVertex3f(k, i + 1, j + 1);
                glVertex3f(k, i + 1, j);

                glVertex3f(k + 1, i, j);
                glVertex3f(k + 1, i, j + 1);
                glVertex3f(k + 1, i + 1, j + 1);
                glVertex3f(k + 1, i + 1, j);

                glVertex3f(k, i + 1, j);
                glVertex3f(k + 1, i + 1, j);
                glVertex3f(k + 1, i + 1, j + 1);
                glVertex3f(k, i + 1, j + 1);

                glVertex3f(k, i, j);
                glVertex3f(k + 1, i, j);
                glVertex3f(k + 1, i, j + 1);
                glVertex3f(k, i, j + 1);
            }
        }
    }
    glEnd();
    glDisable(GL_BLEND);
}

// ПЕРСПЕКТИВНАЯ ПРОЕКЦИЯ
void setupPerspective() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    float aspect = (float)WINDOW_WIDTH / WINDOW_HEIGHT;
    float fov = 60.0f * 3.14159f / 180.0f;
    float range = tan(fov / 2.0f) * 0.1f;
    glFrustum(-range * aspect, range * aspect, -range, range, 0.1f, 1000.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

// УПРАВЛЕНИЕ КАМЕРОЙ С КЛАВИАТУРЫ
void handleInput(sf::Window& window) {
    sf::Event event;
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed) {
            window.close();
        }
        else if (event.type == sf::Event::KeyPressed) {
            float moveSpeed = 2.0f;
            float rotateSpeed = 5.0f;

            if (event.key.code == sf::Keyboard::Escape) window.close();
            if (event.key.code == sf::Keyboard::W) cameraZ += moveSpeed;
            if (event.key.code == sf::Keyboard::S) cameraZ -= moveSpeed;
            if (event.key.code == sf::Keyboard::A) cameraX -= moveSpeed;
            if (event.key.code == sf::Keyboard::D) cameraX += moveSpeed;
            if (event.key.code == sf::Keyboard::Q) cameraY -= moveSpeed;
            if (event.key.code == sf::Keyboard::E) cameraY += moveSpeed;
            if (event.key.code == sf::Keyboard::Left) angleY -= rotateSpeed;
            if (event.key.code == sf::Keyboard::Right) angleY += rotateSpeed;
            if (event.key.code == sf::Keyboard::Up) angleX -= rotateSpeed;
            if (event.key.code == sf::Keyboard::Down) angleX += rotateSpeed;
        }
    }
}

void SetConsolePosition(int x, int y) {
    HWND console = GetConsoleWindow();
    SetWindowPos(console, 0, x, y, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
}

void SetConsoleWindowSize(int width, int height) {
    HWND console = GetConsoleWindow();
    RECT rect;
    GetWindowRect(console, &rect);
    MoveWindow(console, rect.left, rect.top, width, height, TRUE);
}

int main() {
    SetConsoleWindowSize(300, 700);
    SetConsolePosition(1100, 100);

    sf::Window window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "3D Liquid Simulation", sf::Style::Default, sf::ContextSettings(32));
    window.setVerticalSyncEnabled(true);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_ALPHA_TEST);
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

    setupPerspective();

    int kolliquid;
    int kount = 0;

    initializeGrid();
    cout << "kolliquid = ";
    cin >> kolliquid;
    placeObstacles();

    // ДОБАВЛЕНИЕ ЖИДКОСТИ
    for (int i = 0; i < kolliquid; ++i) {
        for (int j = 0; j < GRID_DEPTH; ++j) {
            for (int k = 0; k < GRID_WIDTH; ++k) {
                grid[i][j][k].type = LIQUID;
                grid[i][j][k].r = 0.0f;
                grid[i][j][k].g = 0.7f;
                grid[i][j][k].b = 1.0f;
            }
        }
    }

    while (window.isOpen()) {
        handleInput(window);

        updateLiquid(kolliquid);
        kount++;

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glLoadIdentity();

        // УСТАНОВКА ПОЗИЦИИ КАМЕРЫ
        glTranslatef(-cameraX, -cameraY, cameraZ);
        glRotatef(angleX, 1.0f, 0.0f, 0.0f);
        glRotatef(angleY, 0.0f, 1.0f, 0.0f);

        // ОТРИСОВКА ОСЕЙ КООРДИНАТ
        glBegin(GL_LINES);
        // оX (красная)
        glColor3f(1.0f, 0.0f, 0.0f);
        glVertex3f(0.0f, 0.0f, 0.0f);
        glVertex3f(GRID_WIDTH, 0.0f, 0.0f);
        // оY (зелёная)
        glColor3f(0.0f, 1.0f, 0.0f);
        glVertex3f(0.0f, 0.0f, 0.0f);
        glVertex3f(0.0f, GRID_HEIGHT, 0.0f);
        // оZ (синяя)
        glColor3f(0.0f, 0.0f, 1.0f);
        glVertex3f(0.0f, 0.0f, 0.0f);
        glVertex3f(0.0f, 0.0f, GRID_DEPTH);
        glEnd();

        drawGrid();
        window.display();
        cout << kount << endl;
    }
    return 0;
}
